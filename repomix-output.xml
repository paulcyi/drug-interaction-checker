This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.devcontainer/
  devcontainer.json
.streamlit/
  config.toml
main/
  main.py
utils/
  __init__.py
  api_utils.py
  nlp_utils.py
.replit
main.py
pyproject.toml
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".devcontainer/devcontainer.json">
{
  "name": "Python 3",
  // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile
  "image": "mcr.microsoft.com/devcontainers/python:1-3.11-bullseye",
  "customizations": {
    "codespaces": {
      "openFiles": [
        "README.md",
        "main.py"
      ]
    },
    "vscode": {
      "settings": {},
      "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance"
      ]
    }
  },
  "updateContentCommand": "[ -f packages.txt ] && sudo apt update && sudo apt upgrade -y && sudo xargs apt install -y <packages.txt; [ -f requirements.txt ] && pip3 install --user -r requirements.txt; pip3 install --user streamlit; echo '✅ Packages installed and Requirements met'",
  "postAttachCommand": {
    "server": "streamlit run main.py --server.enableCORS false --server.enableXsrfProtection false"
  },
  "portsAttributes": {
    "8501": {
      "label": "Application",
      "onAutoForward": "openPreview"
    }
  },
  "forwardPorts": [
    8501
  ]
}
</file>

<file path=".streamlit/config.toml">
[server]
headless = true
address = "0.0.0.0"
port = 5000
</file>

<file path="main/main.py">
import streamlit as st
from utils.api_utils import get_rxnav_interactions, get_openfda_interactions
from utils.nlp_utils import analyze_interactions, generate_patient_friendly_summary

st.set_page_config(page_title="CheckMyMeds - Drug Interaction Checker",
                   page_icon="💊",
                   layout="wide")


def main():
    st.title("💊 CheckMyMeds")
    st.subheader("Drug Interaction Checker")

    st.markdown("""
    This application helps you check for potential interactions between medications.
    Enter the names of two drugs below to see if there are any known interactions.
    """)

    col1, col2 = st.columns(2)

    with col1:
        drug1 = st.text_input("First Drug Name", key="drug1")

    with col2:
        drug2 = st.text_input("Second Drug Name", key="drug2")

    if st.button("Check Interaction", type="primary"):
        if not drug1 or not drug2:
            st.error("Please enter both drug names to check for interactions.")
        elif drug1.lower() == drug2.lower():
            st.warning("Please enter two different drug names.")
        else:
            with st.spinner(
                    f"Checking for interactions between {drug1} and {drug2}..."
            ):
                rxnav_results = get_rxnav_interactions(drug1, drug2)

                if rxnav_results['status'] == 'success' and rxnav_results[
                        'interactions']:
                    display_rxnav_results(rxnav_results, drug1, drug2)
                else:
                    st.info(
                        "No interactions found in RxNav or RxNav service unavailable. Checking OpenFDA..."
                    )

                    med1 = drug1.strip().lower()
                    med2 = drug2.strip().lower()

                    found_mentions = []

                    openfda1 = get_openfda_interactions(med1)
                    if openfda1['status'] == 'success':
                        analysis1 = analyze_interactions(
                            openfda1['data'], med2)
                        if analysis1['found_interactions']:
                            found_mentions.append((med1, med2, analysis1))

                    openfda2 = get_openfda_interactions(med2)
                    if openfda2['status'] == 'success':
                        analysis2 = analyze_interactions(
                            openfda2['data'], med1)
                        if analysis2['found_interactions']:
                            found_mentions.append((med2, med1, analysis2))

                    if found_mentions:
                        for primary, secondary, result in found_mentions:
                            display_openfda_results(result, primary, secondary)
                    else:
                        st.info(
                            f"No label mentions found between {drug1.title()} and {drug2.title()} in FDA data."
                        )

    st.markdown("---")
    st.caption("""
    **Disclaimer**: This application provides information from public APIs and is intended for educational purposes only.
    Always consult your healthcare provider before making any decisions about your medications.
    """)


def display_rxnav_results(results, drug1, drug2):
    st.success("✅ Drug interaction information found in RxNav")

    interactions = results['interactions']

    if not interactions:
        st.info(
            f"No known interactions found between {drug1} and {drug2} in RxNav database."
        )
        return

    st.subheader(f"Interaction Information: {drug1} + {drug2}")

    for idx, interaction in enumerate(interactions, 1):
        with st.expander(
                f"Interaction {idx}: {interaction.get('severity', 'Information')}"
        ):
            st.markdown(f"**Description**: {interaction['description']}")

            if 'severity' in interaction:
                severity_color = "🔴" if interaction['severity'].lower(
                ) == 'high' else "🟠" if interaction['severity'].lower(
                ) == 'moderate' else "🟡"
                st.markdown(
                    f"**Severity**: {severity_color} {interaction['severity']}"
                )

            if 'source' in interaction:
                st.markdown(f"**Source**: {interaction['source']}")


def display_openfda_results(results, drug1, drug2):
    if results['found_interactions']:
        st.warning(
            f"⚠️ Potential interactions between {drug1} and {drug2} found in FDA label data"
        )

        st.subheader(
            f"Potential Interaction Information: {drug1.title()} + {drug2.title()}"
        )

        for section, texts in results['highlighted_texts'].items():
            if texts:
                for text in texts:
                    # Show simplified summary FIRST
                    summary = generate_patient_friendly_summary(text)
                    st.markdown(f"🧠 **What This Means:**\n\n{summary}")

                    # Show full label snippet in expander
                    with st.expander(
                            f"📄 See the original label text from {section.replace('_', ' ').title()}"
                    ):
                        st.markdown("> " + text)
    else:
        st.info(
            f"No mentions of {drug2} found in {drug1}'s OpenFDA drug information."
        )

        if results['available_sections']:
            st.subheader(f"Available Information for {drug1.title()}")
            for section in results['available_sections']:
                st.markdown(f"- {section.replace('_', ' ').title()}")
        else:
            st.info(
                f"No detailed label information found for {drug1.title()} in OpenFDA database."
            )


if __name__ == "__main__":
    main()
</file>

<file path="utils/__init__.py">
# This file marks the utils directory as a Python package
</file>

<file path="utils/api_utils.py">
import requests
import json
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def get_rxnav_interactions(drug1, drug2):
    """
    Get interaction information between two drugs from RxNav API
    
    Args:
        drug1 (str): Name of the first drug
        drug2 (str): Name of the second drug
        
    Returns:
        dict: Status and interaction data
    """
    result = {
        'status': 'error',
        'message': '',
        'interactions': []
    }
    
    try:
        # First, find RxCUIs for the drug names
        drug1_rxcui = get_rxcui(drug1)
        drug2_rxcui = get_rxcui(drug2)
        
        if not drug1_rxcui:
            result['message'] = f"Could not find RxCUI for {drug1}"
            return result
            
        if not drug2_rxcui:
            result['message'] = f"Could not find RxCUI for {drug2}"
            return result
        
        # Now check for interactions using the RxCUIs
        interactions_url = f"https://rxnav.nlm.nih.gov/REST/interaction/list.json?rxcuis={drug1_rxcui}+{drug2_rxcui}"
        response = requests.get(interactions_url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            # Check if there are interaction groups in the response
            if 'fullInteractionTypeGroup' in data['interactionTypeGroup']:
                interactions = []
                
                for group in data['interactionTypeGroup'][0]['fullInteractionType']:
                    for interaction in group['interactionPair']:
                        description = interaction['description']
                        severity = get_interaction_severity(description)
                        
                        interactions.append({
                            'description': description,
                            'severity': severity,
                            'source': group.get('source', 'RxNav')
                        })
                
                result['status'] = 'success'
                result['interactions'] = interactions
            else:
                # No interactions found
                result['status'] = 'success'
                result['message'] = 'No interactions found'
        else:
            result['message'] = f"RxNav API returned status code {response.status_code}"
    
    except requests.exceptions.RequestException as e:
        result['message'] = f"Error connecting to RxNav API: {str(e)}"
        logger.error(f"RxNav API error: {str(e)}")
    except json.JSONDecodeError:
        result['message'] = "Error parsing RxNav API response"
        logger.error("JSON decode error with RxNav response")
    except Exception as e:
        result['message'] = f"Unexpected error: {str(e)}"
        logger.error(f"Unexpected error in get_rxnav_interactions: {str(e)}")
    
    return result

def get_rxcui(drug_name):
    """
    Get RxCUI (RxNorm Concept Unique Identifier) for a drug name
    
    Args:
        drug_name (str): Name of the drug
        
    Returns:
        str: RxCUI if found, None otherwise
    """
    try:
        # Use RxNav API to find the RxCUI by drug name
        url = f"https://rxnav.nlm.nih.gov/REST/rxcui.json?name={drug_name}&search=1"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            # Check if RxCUI was found
            if 'idGroup' in data and 'rxnormId' in data['idGroup'] and data['idGroup']['rxnormId']:
                return data['idGroup']['rxnormId'][0]
    
    except Exception as e:
        logger.error(f"Error getting RxCUI for {drug_name}: {str(e)}")
    
    return None

def get_interaction_severity(description):
    """
    Estimate interaction severity based on description text
    
    Args:
        description (str): Interaction description
        
    Returns:
        str: Estimated severity (High, Moderate, or Low)
    """
    # Keywords that might indicate high severity
    high_severity_keywords = [
        'contraindicated', 'severe', 'fatal', 'death', 'life-threatening',
        'avoid', 'dangerous', 'serious', 'risk', 'not recommended'
    ]
    
    # Keywords that might indicate moderate severity
    moderate_severity_keywords = [
        'caution', 'adjust', 'monitor', 'reduce', 'increase',
        'moderate', 'may', 'possible', 'potentially'
    ]
    
    description_lower = description.lower()
    
    for keyword in high_severity_keywords:
        if keyword in description_lower:
            return "High"
    
    for keyword in moderate_severity_keywords:
        if keyword in description_lower:
            return "Moderate"
    
    return "Low"

def get_openfda_interactions(drug_name):
    """
    Get drug information from OpenFDA API
    
    Args:
        drug_name (str): Name of the drug
        
    Returns:
        dict: Status and drug data
    """
    result = {
        'status': 'error',
        'message': '',
        'data': {}
    }
    
    try:
        # Search OpenFDA for the drug by name
        url = f"https://api.fda.gov/drug/label.json?search=openfda.generic_name:{drug_name}+brand_name:{drug_name}&limit=1"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            if 'results' in data and len(data['results']) > 0:
                drug_data = data['results'][0]
                
                # Extract interaction sections
                interaction_data = {}
                
                # Check for drug interactions section
                if 'drug_interactions' in drug_data:
                    interaction_data['drug_interactions'] = drug_data['drug_interactions']
                
                # Check for warnings section
                if 'warnings' in drug_data:
                    interaction_data['warnings'] = drug_data['warnings']
                
                # Check for precautions section
                if 'precautions' in drug_data:
                    interaction_data['precautions'] = drug_data['precautions']
                
                # Check for boxed warnings (high severity)
                if 'boxed_warning' in drug_data:
                    interaction_data['boxed_warning'] = drug_data['boxed_warning']
                
                # Additional useful sections
                if 'warnings_and_cautions' in drug_data:
                    interaction_data['warnings_and_cautions'] = drug_data['warnings_and_cautions']
                
                result['status'] = 'success'
                result['data'] = interaction_data
            else:
                result['status'] = 'error'
                result['message'] = f"No information found for {drug_name} in OpenFDA"
        elif response.status_code == 404:
            result['status'] = 'error'
            result['message'] = f"No information found for {drug_name} in OpenFDA"
        else:
            result['status'] = 'error'
            result['message'] = f"OpenFDA API returned status code {response.status_code}"
    
    except requests.exceptions.RequestException as e:
        result['message'] = f"Error connecting to OpenFDA API: {str(e)}"
        logger.error(f"OpenFDA API error: {str(e)}")
    except json.JSONDecodeError:
        result['message'] = "Error parsing OpenFDA API response"
        logger.error("JSON decode error with OpenFDA response")
    except Exception as e:
        result['message'] = f"Unexpected error: {str(e)}"
        logger.error(f"Unexpected error in get_openfda_interactions: {str(e)}")
    
    return result
</file>

<file path="utils/nlp_utils.py">
import re
from collections import defaultdict


def analyze_interactions(drug_data, target_drug):
    """
    Analyze drug data from OpenFDA to find mentions of the target drug.

    Args:
        drug_data (dict): OpenFDA drug data with interaction sections
        target_drug (str): Name of the drug to look for

    Returns:
        dict: Analysis results with highlighted text
    """
    result = {
        'found_interactions': False,
        'available_sections': list(drug_data.keys()),
        'highlighted_texts': defaultdict(list),
    }

    if not drug_data:
        return result

    target_variations = get_drug_name_variations(target_drug)

    for section, texts in drug_data.items():
        if not texts:
            continue

        if isinstance(texts, str):
            text_list = [texts]
        else:
            text_list = texts

        for text in text_list:
            for variant in target_variations:
                if variant in text.lower():
                    snippet = re.sub(f"(?i)({re.escape(variant)})", r"**\1**",
                                     text)
                    result['highlighted_texts'][section].append(snippet)
                    result['found_interactions'] = True
                    break  # Only match once per section

    return result


def get_drug_name_variations(drug_name):
    base = drug_name.lower().strip()
    ignore_suffixes = [
        "sodium", "hydrochloride", "acetate", "phosphate", "sulfate",
        "nitrate", "chloride", "mesylate", "succinate"
    ]
    words = base.split()
    core_words = [word for word in words if word not in ignore_suffixes]
    base_name = " ".join(core_words)

    variations = set()
    variations.add(base)
    variations.add(base_name)
    variations.update(core_words)

    return list(variations)


def generate_patient_friendly_summary(snippet):
    lowered = snippet.lower()

    explanations = {
        "bleeding":
        "This combination may increase your risk of serious bleeding.",
        "bleed":
        "This combination may increase your risk of serious bleeding.",
        "hemorrhage":
        "This combination may increase your risk of internal bleeding.",
        "liver damage": "This may harm your liver if taken together.",
        "serotonin syndrome":
        "This could lead to dangerously high levels of serotonin.",
        "qt prolongation": "This may affect your heart rhythm.",
        "cns depression":
        "This may cause extreme drowsiness or slow breathing.",
        "respiratory depression": "This may slow down your breathing.",
        "renal impairment": "This may worsen kidney function.",
        "seizures": "This combination may increase your risk of seizures.",
        "hypotension": "This may cause dangerously low blood pressure.",
        "toxicity": "This may increase your risk of toxicity or overdose.",
    }

    for keyword, summary in explanations.items():
        if keyword in lowered:
            return summary

    return "This combination may lead to unwanted side effects. Please consult your doctor or pharmacist."
</file>

<file path=".replit">
modules = ["python-3.11"]

[nix]
channel = "stable-24_05"

[deployment]
deploymentTarget = "autoscale"
run = ["streamlit", "run", "app.py", "--server.port", "5000"]

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Streamlit Server"

[[workflows.workflow]]
name = "Streamlit Server"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "streamlit run main.py --server.port 5000"
waitForPort = 5000

[[ports]]
localPort = 5000
externalPort = 80
</file>

<file path="pyproject.toml">
[project]
name = "repl-nix-workspace"
version = "0.1.0"
description = "Add your description here"
requires-python = ">=3.11"
dependencies = [
    "requests>=2.32.3",
    "streamlit>=1.44.1",
]
</file>

<file path="main.py">
import streamlit as st
from utils.api_utils import get_rxnav_interactions, get_openfda_interactions
from utils.nlp_utils import analyze_interactions, generate_patient_friendly_summary

st.set_page_config(page_title="CheckMyMeds - Drug Interaction Checker",
                   page_icon="💊",
                   layout="wide")


def main():
    st.title("💊 CheckMyMeds")
    st.subheader("Drug Interaction Checker")

    st.markdown("""
    This application helps you check for potential interactions between medications.
    Enter the names of two drugs below to see if there are any known interactions.
    """)

    col1, col2 = st.columns(2)

    with col1:
        drug1 = st.text_input("First Drug Name", key="drug1")

    with col2:
        drug2 = st.text_input("Second Drug Name", key="drug2")

    if st.button("Check Interaction", type="primary"):
        if not drug1 or not drug2:
            st.error("Please enter both drug names to check for interactions.")
        elif drug1.lower() == drug2.lower():
            st.warning("Please enter two different drug names.")
        else:
            with st.spinner(
                    f"Checking for interactions between {drug1} and {drug2}..."
            ):
                rxnav_results = get_rxnav_interactions(drug1, drug2)

                if rxnav_results['status'] == 'success' and rxnav_results[
                        'interactions']:
                    display_rxnav_results(rxnav_results, drug1, drug2)
                else:
                    st.info(
                        "No interactions found in RxNav or RxNav service unavailable. Checking OpenFDA..."
                    )

                    med1 = drug1.strip().lower()
                    med2 = drug2.strip().lower()

                    found_mentions = []

                    openfda1 = get_openfda_interactions(med1)
                    if openfda1['status'] == 'success':
                        analysis1 = analyze_interactions(
                            openfda1['data'], med2)
                        if analysis1['found_interactions']:
                            found_mentions.append((med1, med2, analysis1))

                    openfda2 = get_openfda_interactions(med2)
                    if openfda2['status'] == 'success':
                        analysis2 = analyze_interactions(
                            openfda2['data'], med1)
                        if analysis2['found_interactions']:
                            found_mentions.append((med2, med1, analysis2))

                    if found_mentions:
                        for primary, secondary, result in found_mentions:
                            display_openfda_results(result, primary, secondary)
                    else:
                        st.info(
                            f"No label mentions found between {drug1.title()} and {drug2.title()} in FDA data."
                        )

    st.markdown("---")
    st.caption("""
    **Disclaimer**: This application provides information from public APIs and is intended for educational purposes only.
    Always consult your healthcare provider before making any decisions about your medications.
    """)


def display_rxnav_results(results, drug1, drug2):
    st.success("✅ Drug interaction information found in RxNav")

    interactions = results['interactions']

    if not interactions:
        st.info(
            f"No known interactions found between {drug1} and {drug2} in RxNav database."
        )
        return

    st.subheader(f"Interaction Information: {drug1} + {drug2}")

    for idx, interaction in enumerate(interactions, 1):
        with st.expander(
                f"Interaction {idx}: {interaction.get('severity', 'Information')}"
        ):
            st.markdown(f"**Description**: {interaction['description']}")

            if 'severity' in interaction:
                severity_color = "🔴" if interaction['severity'].lower(
                ) == 'high' else "🟠" if interaction['severity'].lower(
                ) == 'moderate' else "🟡"
                st.markdown(
                    f"**Severity**: {severity_color} {interaction['severity']}"
                )

            if 'source' in interaction:
                st.markdown(f"**Source**: {interaction['source']}")


def display_openfda_results(results, drug1, drug2):
    if results['found_interactions']:
        st.warning(
            f"⚠️ Potential interactions between {drug1} and {drug2} found in FDA label data"
        )

        st.subheader(
            f"Potential Interaction Information: {drug1.title()} + {drug2.title()}"
        )

        for section, texts in results['highlighted_texts'].items():
            if texts:
                for text in texts:
                    # Show simplified summary FIRST
                    summary = generate_patient_friendly_summary(text)
                    st.markdown(f"🧠 **What This Means:**\n\n{summary}")

                    # Show full label snippet in expander
                    with st.expander(
                            f"📄 See the original label text from {section.replace('_', ' ').title()}"
                    ):
                        st.markdown("> " + text)
    else:
        st.info(
            f"No mentions of {drug2} found in {drug1}'s OpenFDA drug information."
        )

        if results['available_sections']:
            st.subheader(f"Available Information for {drug1.title()}")
            for section in results['available_sections']:
                st.markdown(f"- {section.replace('_', ' ').title()}")
        else:
            st.info(
                f"No detailed label information found for {drug1.title()} in OpenFDA database."
            )


if __name__ == "__main__":
    main()
</file>

</files>
